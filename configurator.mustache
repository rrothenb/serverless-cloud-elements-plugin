import {platformSDK} from './sdks/platformSDK'

{{#variables}}
  import { {{&type}}SDK } from './sdks/{{&type}}SDK'
{{/variables}}

const {register, buildConfig} = require('serverless-cloud-elements-runtime')

interface Configuration {
{{#variables}}
  {{&name}}: {{&type}}SDK,
{{/variables}}
}

interface Event {
objectId: string,
date: string,
elementKey: string,
pollDate: string,
eventType: string,
hubKey: string,
objectType: string
}

interface Trigger {
events: Event[],
userId: number,
elementKey: string
accountId: number,
eventId: string,
companyId: number,
instanceId: number,
instanceName: string
}

export async function configurator(input: any) : {trigger: Trigger, config: Configuration, platform: platformSDK, done: any} {
let body = input[0].body;
let trigger
if (body) {
body = typeof body === 'object' ? body : JSON.parse(body);
trigger = body.message;
}

const config = await buildConfig(
input[1],
input[0].path,
body && body.message && body.message.instanceId,
'{{&baseUrl}}',
'{{&authHeader}}',
[
{{#variables}}
  {
  name: '{{&name}}',
  type: '{{&type}}',
  token: '{{&token}}',
  id: '{{&id}}'
  }
{{/variables}}
null
])

{{#variables}}
  register({{&type}}SDK, obj => new {{&type}}SDK(obj.domain.replace('/elements/api-v2', ''), obj.authorizationHeader))
{{/variables}}

const platform = new platformSDK('{{&baseUrl}}', '{{&authHeader}}');

const done = response => input[2](null, {statusCode: 200, body: JSON.stringify(response)});

const result = {trigger, config, platform, done}

if (config) {
for (let key of Object.keys(config)) {
result[key] = config[key]
}
}

return result
}